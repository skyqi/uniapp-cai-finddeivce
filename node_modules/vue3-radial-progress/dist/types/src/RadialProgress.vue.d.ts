import type { StrokeLinecap, Style } from "./types";
import type { PropType } from "vue";
declare const _default: import("vue").DefineComponent<{
    diameter: {
        type: PropType<number>;
        required: false;
        default: number;
    };
    totalSteps: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    completedSteps: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    startColor: {
        type: PropType<string>;
        required: false;
        default: string;
    };
    stopColor: {
        type: PropType<string>;
        required: false;
        default: string;
    };
    innerStrokeColor: {
        type: PropType<string>;
        required: false;
        default: string;
    };
    strokeWidth: {
        type: PropType<number>;
        required: false;
        default: number;
    };
    innerStrokeWidth: {
        type: PropType<number>;
        required: false;
        default: number;
    };
    strokeLinecap: {
        type: PropType<StrokeLinecap>;
        required: false;
        default: string;
    };
    animateSpeed: {
        type: PropType<number>;
        required: false;
        default: number;
    };
    fps: {
        type: PropType<number>;
        required: false;
        default: number;
    };
    timingFunc: {
        type: PropType<string>;
        required: false;
        default: string;
    };
    isClockwise: {
        type: PropType<boolean>;
        required: false;
        default: boolean;
    };
}, {
    gradientAnimation: import("vue").Ref<number | null>;
    innerCircleRadius: import("vue").ComputedRef<number>;
    radialGradientId: string;
    strokeDashoffset: import("vue").Ref<number>;
    innerCircleStyle: import("vue").ComputedRef<Style>;
    containerStyle: import("vue").ComputedRef<Style>;
    circumference: import("vue").ComputedRef<number>;
    progressStyle: import("vue").ComputedRef<Style>;
    currentAngle: import("vue").Ref<number>;
    strokeStyle: import("vue").ComputedRef<Style>;
    gradient: {
        fx: number;
        fy: number;
        cx: number;
        cy: number;
        r: number;
    };
    radius: import("vue").ComputedRef<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    diameter?: unknown;
    totalSteps?: unknown;
    completedSteps?: unknown;
    startColor?: unknown;
    stopColor?: unknown;
    innerStrokeColor?: unknown;
    strokeWidth?: unknown;
    innerStrokeWidth?: unknown;
    strokeLinecap?: unknown;
    animateSpeed?: unknown;
    fps?: unknown;
    timingFunc?: unknown;
    isClockwise?: unknown;
} & {
    diameter: number;
    totalSteps: number;
    completedSteps: number;
    startColor: string;
    stopColor: string;
    innerStrokeColor: string;
    strokeWidth: number;
    innerStrokeWidth: number;
    strokeLinecap: StrokeLinecap;
    animateSpeed: number;
    fps: number;
    timingFunc: string;
    isClockwise: boolean;
} & {}>, {
    diameter: number;
    totalSteps: number;
    completedSteps: number;
    startColor: string;
    stopColor: string;
    innerStrokeColor: string;
    strokeWidth: number;
    innerStrokeWidth: number;
    strokeLinecap: StrokeLinecap;
    animateSpeed: number;
    fps: number;
    timingFunc: string;
    isClockwise: boolean;
}>;
export default _default;
